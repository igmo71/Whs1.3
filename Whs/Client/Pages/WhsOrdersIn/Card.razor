@using Whs.Shared.Models

<span class="order shadow_my d_blk @queueType @ifExpired @ifMoving @departed">
    <span class="leftpart d_blk flt_left" title="@Value.Документ_Name">
        <span></span>
    </span>
    <span class="rightpart d_blk flt_right">
        <span class="receiver flt_left w_100" title="@Value.ОтправительПолучатель_Name">&nbsp;@Value.ОтправительПолучатель_NameString</span>
        <span class="comment flt_left w_100" title="@Value.Комментарий">@Value.КомментарийString</span>
        <span class="date d_blk">@showDate</span>
        <div class="foot d_blk flt_left w_100">
            <span class="skus flt_left">
                <label class="val birbox">@Value.КоличествоСтрок</label>
            </span>
            <span class="responsible">
                <label class="val birbox">@Value.LastData?.ApplicationUser?.Surname</label>
            </span>
            <span class="weight flt_right">
                <label class="val birbox">@Value.Вес</label>
            </span>
        </div>
    </span>
</span>

@code {
    [Parameter] public WhsOrderIn Value { get; set; }
    private string queueType;
    private string ifExpired;
    private string ifMoving;
    private string departed;
    private string showDate;

    protected override void OnParametersSet()
    {
        switch (Value.Статус)
        {
            case WhsOrderStatus.In.ToReceive:
            case WhsOrderStatus.In.AtWork:
                departed = "";
                ifExpired = Value.СрокВыполнения < DateTime.Now ? "timeout" : "";
                showDate = Value.TimeUpString;
                break;
            case WhsOrderStatus.In.Received:
                departed = "departed";
                ifExpired = "";
                showDate = Value.LastData?.DateTimeString;
                break;
        }

        switch (Value.ТипОчереди)
        {
            case QueType.In.ForCustomer: queueType = "liveq"; break;
            case QueType.In.QuicklyForSale: queueType = "emergency"; break;
            case QueType.In.Expired: queueType = "toolate"; break;
            case QueType.In.NoQue: queueType = "noorder"; break;
            default: queueType = "noorder"; break;
        }

        ifMoving = Value.ЭтоПеремещение ? "transfer" : "";
    }
}
